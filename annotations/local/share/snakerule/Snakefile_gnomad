# Annotations needed to get GATK mut calling going
ALL= ["1000g_pon.hg38.vcf.gz","1000g_pon.hg38.vcf.gz.tbi","af-only-gnomad.hg38.vcf.gz","GRCh38.d1.vd1.fa","GRCh38.d1.vd1.fa.bwt","GRCh38.d1.vd1.dict","All_20180418.vcf.gz","All_20180418.vcf.gz.tbi","chr_All_20180418.vcf.bgz", "gnomad.forcontamination.exomes.vcf"]
rule all:
	input: ALL

#############THESE are on hg19, I fear and hate.
#http://gnomad.broadinstitute.org/downloads
#GNOMAD_EXOME='https://storage.googleapis.com/gnomad-public/release/2.1/vcf/exomes/gnomad.exomes.r2.1.sites.vcf.bgz'

#gsutil cp gs://gatk-best-practices/somatic-hg38/af-only-gnomad.hg38.vcf.gz .
#gsutil cp gs://gatk-best-practices/somatic-hg38/af-only-gnomad.hg38.vcf.gz.tbi .

#rule exon_vaf:
#    output: vcf="gnomad.exomes.vcf.bgz"
#    params: url=GNOMAD_EXOME
#    shell: "wget -O {output.vcf} {params.url}; wget -O {output.vcf}.tbi {params.url}.tbi"


# Lazily downloaded by hand:
#ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/Mutect2/af-only-gnomad.hg38.vcf.gz

# this is an enourmous file (~700Gb) that probably is not needed, considering:
# https://gatkforums.broadinstitute.org/gatk/discussion/12404/is-af-only-gnomad-hg38-vcf-gz-exome-or-genome-data
rule genomes_vaf:
    output: vcf="gnomad.genomes.vcf.gz"
    params: url="https://storage.googleapis.com/gnomad-public/release/2.1.1/liftover_grch38/vcf/genomes/gnomad.genomes.r2.1.1.sites.liftover_grch38.vcf.bgz"
    shell: "wget -O {output.vcf} {params.url}; wget -O {output.vcf}.tbi {params.url}.tbi"

rule pon:
    output: "1000g_pon.hg38.vcf.gz"
    shell:
        """ wget -O {output} https://storage.googleapis.com/gatk-best-practices/somatic-hg38/1000g_pon.hg38.vcf.gz
        """


rule pontbi:
    output: "1000g_pon.hg38.vcf.gz.tbi"
    shell:
        """ wget -O {output} https://storage.googleapis.com/gatk-best-practices/somatic-hg38/1000g_pon.hg38.vcf.gz.tbi
        """
    
##--restrict-alleles-to BIALLELIC
## exomes is misleading, see https://gatkforums.broadinstitute.org/gatk/discussion/12404/is-af-only-gnomad-hg38-vcf-gz-exome-or-genome-data
rule filter_AF_biallelic:
    input: vcf="af-only-gnomad.hg38.vcf.gz"
    singularity: "/home/egrassi/gatk/gatk.img"
    docker: "egrassi/occamsnakes/sequenza:1"
    output: "gnomad.forcontamination.exomes.vcf"
    shell: 
        """
         gatk SelectVariants --restrict-alleles-to BIALLELIC -V {input.vcf} --selectExpressions "AF > 0.05" -O {output}
        """

#https://gatkforums.broadinstitute.org/gatk/discussion/24026/getpileupsummaries-error-badly-formed-genome-unclippedloc
rule filter_alt:
    input: "gnomad.forcontamination.exomes.vcf"
    output: "gnomad.forcontamination.noalt.exomes.vcf"
    docker: "egrassi/occamsnakes/align_recalibrate:1"
    shell:
        """
          grep -v _alt {input} > {output};
          tabix {output};
        """
    
#(plot) [gnomad]egrassi@hactarlogin$ seff 31681
#Job ID: 31681
#Cluster: hactar
#User/Group: egrassi/egrassi
#State: COMPLETED (exit code 0)
#Cores: 1
#CPU Utilized: 01:47:15
#CPU Efficiency: 32.22% of 05:32:51 core-walltime
#Job Wall-clock time: 05:32:51
#Memory Utilized: 862.20 MB
#Memory Efficiency: 86.22% of 1000.00 MB
#
#
#faster with smaller gnomad from gatk:
#Job ID: 31892
#Cluster: hactar
#User/Group: egrassi/egrassi
#State: COMPLETED (exit code 0)
#Cores: 1
#CPU Utilized: 00:11:09
#CPU Efficiency: 98.96% of 00:11:16 core-walltime
#Job Wall-clock time: 00:11:16
#Memory Utilized: 1.63 GB
#Memory Efficiency: 41.64% of 3.91 GB

##contig=<ID=1,length=249250621,assembly=gnomAD_GRCh37>
#
rule add_chr_to_vcf_porc:
    input: "{whatever}.vcf.gz"
    output: "chr_{whatever}.vcf.bgz"
    docker: "egrassi/occamsnakes/align_recalibrate:1"
    shell:
        """
        zcat {input} | perl -ane 'if (/^#/) {{ s/contig=<ID=([^,]+)/contig=<ID=chr$1/; print "$_"}} else {{print "chr$_"}}' | bgzip > {output};
        tabix -p vcf {output};
        """


### gdc hg38 genome
#https://api.gdc.cancer.gov/data/254f697d-310d-4d7d-a27b-27fbf767a834

rule genome:
    output: "GRCh38.d1.vd1.fa"
    shell:
        """
            wget -O {output}.tar.gz https://api.gdc.cancer.gov/data/254f697d-310d-4d7d-a27b-27fbf767a834;
            tar xvvzf {output}.tar.gz;
            rm {output}.tar.gz;
        """

rule genome_bwa_indices:
    output: "GRCh38.d1.vd1.fa.bwt"
    shell:
        """
            wget -O {output}.tar.gz https://api.gdc.cancer.gov/data/25217ec9-af07-4a17-8db9-101271ee7225;
            tar xvvzf {output}.tar.gz;
            rm {output}.tar.gz;
        """


rule genome_gatk_indices:
    output: "GRCh38.d1.vd1.dict"
    shell:
        """
            wget -O {output}.tar.gz https://api.gdc.cancer.gov/data/2c5730fb-0909-4e2a-8a7a-c9a7f8b2dad5;
            tar xvvzf {output}.tar.gz;
            rm {output}.tar.gz;
        """

### dbsnp
rule dbsnp:
    output: "All_20180418.vcf.gz"
    shell:
        """ wget -O {output} ftp://ftp.ncbi.nih.gov/snp/organisms/human_9606/VCF/All_20180418.vcf.gz
        """

# controllare cosa sia ftp://ftp.ncbi.nih.gov/snp/organisms/human_9606/VCF/GATK/All_20180418.vcf.gz
rule dbsnp_tbi:
    output: "All_20180418.vcf.gz.tbi"
    shell:
        """ wget -O {output} ftp://ftp.ncbi.nih.gov/snp/organisms/human_9606/VCF/All_20180418.vcf.gz.tbi
        """


rule wgs_intervals:
    output: "wgs_calling_regions.hg38.interval_list"
    shell: 
         """
         wget ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/hg38/wgs_calling_regions.hg38.interval_list
         """

# intervals are 1 based end included https://gatkforums.broadinstitute.org/gatk/discussion/4879/depthofcoverage-interval-summary-1-on-the-start-position-of-each-intervals
rule wgs_intervals_bed:
    input: "wgs_calling_regions.hg38.interval_list"
    output: "wgs_calling_regions.hg38.bed"
    shell: 
        """
        grep -v "^@" {input} | gawk -v OFS='\\t' -F'\\t' '{{print $1, $2+1,$3}}' > {output}
        """

### sequenza
#(sequenza) [gnomad]egrassi@hactarlogin$ snakemake_cluster 1 sequenza_gc_w200.wig.gz ~/snakegatk/local/share/envs/hactar.json 240:00:00 10000 1 
rule sequenza:
    input: "GRCh38.d1.vd1.fa"
    output: "sequenza_gc_w{w}.wig.gz"
    docker: "egrassi/occamsnakes/sequenza:1"
    shell:
        """
            sequenza-utils gc_wiggle --fasta {input} -o {output} -w {wildcards.w}
        """


### 12 intervals to run mutect in //
rule dicttobed:
    input: "GRCh38.d1.vd1.dict"
    output: "GRCh38.d1.vd1.allchr.bed"
    shell:
        """
         cut -f 2,3 {input} | sed 1d | sed 's/SN://1; s/LN://1'  | grep chr  | gawk -v OFS='\\t' -F'\\t' '{{print $1,0,$2}}' > {output}
        """

rule intervals:
    input: ref="GRCh38.d1.vd1.fa", bed="GRCh38.d1.vd1.allchr.bed"
    output: directory("GRCh38.d1.vd1.n{n}")
    docker: "egrassi/occamsnakes/occamsnakes/gatk:1"
    shell:
        """
            gatk SplitIntervals -R {input.ref} -L {input.bed} --scatter-count {wildcards.n} -O {output}
        """


